server {
    listen 80;
    # listen [::]:80;
    listen 443 ssl http2;
    # listen [::]:443 ssl http2;

    server_name invidious.protokolla.fi;

    access_log off;
    error_log /var/log/nginx/error.log crit;

    ssl_certificate /etc/ssl/nginx/invidious.protokolla.fi_ecc/fullchain.cer;
    ssl_certificate_key /etc/ssl/nginx/invidious.protokolla.fi_ecc/invidious.protokolla.fi.key;

    ssl_session_timeout 1d;
    # about 40000 sessions
    ssl_session_cache shared:MozSSL:10m;
    ssl_session_tickets off;

    ssl_prefer_server_ciphers on;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS;

    # OCSP stapling
    ssl_stapling on;
    ssl_stapling_verify on;

    # verify chain of trust of OCSP response using Root CA and Intermediate certs
    ssl_trusted_certificate /etc/ssl/nginx/invidious.protokolla.fi_ecc/fullchain.cer;

    # if not connected to HTTPS, perma-redirect to HTTPS
    if ($https = '') { return 301 https://$host$request_uri; }

    location / {
        # HSTS is already done by invidious docker container
        # add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload";
        add_header X-Frame-Options DENY;

        proxy_pass http://127.0.0.1:8030;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header Host $host;
        # so Invidious knows domain
        proxy_http_version 1.1; 
        # to keep alive
        proxy_set_header Connection ""; 
        # to keep alive
    }
}
